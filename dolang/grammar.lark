?start: equation | predicate

?equation: double_complementarity | equality | formula

equation_block: _NEWLINE? (equation) (_NEWLINE equation )* _NEWLINE?
complementarity_block: _NEWLINE? (double_complementarity | formula) (_NEWLINE double_complementarity | _NEWLINE formula )* _NEWLINE?
assignment_block: _NEWLINE? assignment (_NEWLINE assignment )* _NEWLINE?

assignment: variable "=" formula

equality: sum "=" sum 
    | sum "==" sum
!inequality: formula ("<="|"<"|">"|">=") formula
predicate: [quantifier] (equality | inequality)
quantifier: "∀" "t" ","
double_inequality: formula "<=" symbol "<=" formula
    | formula "<=" variable "<=" formula
double_complementarity: formula _PERP double_inequality


_PERP: "⟂" | "|"

?formula: sum
?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub
?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div
?pow: atom _POW atom -> pow

_POW: "^"|"**"

?atom: NUMBER           -> number
        | "-" atom         -> neg
        | pow
        | symbol            
        | "(" sum ")"
        | expectation
        | call
        | variable

!symbol: NAME -> symbol
expectation: ("E["|"𝔼[") formula "]" -> expectation
variable: cname  "[" date_index "]" -> variable
        | cname "[" "t" "]" -> variable
        | cname "(" date_index ")" -> variable
        | cname "[" "t$" subperiod "]"
subperiod: INT | NAME
!cname: NAME -> name
?date_index: "t" SIGNED_INT2 -> date
    | SIGNED_INT -> date
?call: FUNCTION "(" sum ")" -> call
FUNCTION: "sin"|"cos"|"exp"|"log"

SIGNED_INT2: ("+"|"-") INT

_NEWLINE: NEWLINE
UNICODE_LETTER: /[^\W\d_\$]/
NAME: UNICODE_LETTER ("_"|UNICODE_LETTER|DIGIT)*
%import common.SIGNED_INT
%import common.DIGIT
%import common.INT
%import common.NUMBER
%import common.WS_INLINE
%import common.NEWLINE
%ignore WS_INLINE